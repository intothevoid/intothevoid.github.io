<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on Into The Void</title>
    <link>https://intothevoid.github.io/tags/code/</link>
    <description>Recent content in Code on Into The Void</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 May 2024 21:40:39 +0930</lastBuildDate>
    <atom:link href="https://intothevoid.github.io/tags/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Organise Videos By Resolution</title>
      <link>https://intothevoid.github.io/2024/05/organise-videos-by-resolution/</link>
      <pubDate>Sat, 18 May 2024 21:40:39 +0930</pubDate>
      <guid>https://intothevoid.github.io/2024/05/organise-videos-by-resolution/</guid>
      <description>Recently I was clearing out some old movie rips that I had created from VideoCDs and DVDs many years ago. I wanted a quick and dirty way to organise these i.e. get rid of the videos of resolutions lower than 720p (1280x720)&#xA;With LLMs all the rage at the moment, all it took is a few prompts and corrections and in 15 minutes I had this script ready to go -</description>
    </item>
    <item>
      <title>An introduction to the OpenAI API using Python</title>
      <link>https://intothevoid.github.io/2023/04/an-introduction-to-the-openai-api-using-python/</link>
      <pubDate>Wed, 19 Apr 2023 22:31:18 +0930</pubDate>
      <guid>https://intothevoid.github.io/2023/04/an-introduction-to-the-openai-api-using-python/</guid>
      <description>Introduction Ever wanted to play chess against an AI? With the OpenAI API, you can! This blog post will show you how to use Python to interface with the OpenAI API, send and receive requests, and even play a game of chess against an AI opponent. We&amp;rsquo;ll be using the FEN representation of the chess board to communicate game states with the API.&#xA;Setting Up Before we start, make sure you have the following:</description>
    </item>
    <item>
      <title>NoSQL Databases - MongoDB</title>
      <link>https://intothevoid.github.io/2022/12/nosql-databases-mongodb/</link>
      <pubDate>Fri, 30 Dec 2022 09:51:13 +1030</pubDate>
      <guid>https://intothevoid.github.io/2022/12/nosql-databases-mongodb/</guid>
      <description>NoSQL databases are a type of database that is designed to handle large amounts of data that is distributed across a large number of servers. NoSQL databases are particularly well-suited for handling unstructured data, such as text, images, and videos, and for handling data that is generated by web and mobile applications.&#xA;There are several different types of NoSQL databases, including:&#xA;Document databases: These databases store data in the form of documents, which are similar to JSON objects.</description>
    </item>
    <item>
      <title>Levenshtein Distance</title>
      <link>https://intothevoid.github.io/2022/12/levenshtein-distance/</link>
      <pubDate>Mon, 26 Dec 2022 00:04:51 +1030</pubDate>
      <guid>https://intothevoid.github.io/2022/12/levenshtein-distance/</guid>
      <description>Levenshtein distance is a measure of the similarity between two strings, calculated as the minimum number of single-character edits (insertions, deletions, or substitutions) required to transform one string into the other. Here is an example of how you can calculate the Levenshtein distance between two strings in Go:&#xA;package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math&amp;#34; ) func main() { s1 := &amp;#34;kitten&amp;#34; s2 := &amp;#34;sitting&amp;#34; distance := levenshteinDistance(s1, s2) fmt.Printf(&amp;#34;The Levenshtein distance between %s and %s is %d\n&amp;#34;, s1, s2, distance) } func levenshteinDistance(s1, s2 string) int { // Convert strings to rune slices for Unicode support r1 := []rune(s1) r2 := []rune(s2) // Initialize a two-dimensional matrix with all values set to zero matrix := make([][]int, len(r1)+1) for i := range matrix { matrix[i] = make([]int, len(r2)+1) } // Set the initial values of the first row and column of the matrix for i := 1; i &amp;lt;= len(r1); i++ { matrix[i][0] = i } for j := 1; j &amp;lt;= len(r2); j++ { matrix[0][j] = j } // Calculate the Levenshtein distance using the dynamic programming algorithm for i := 1; i &amp;lt;= len(r1); i++ { for j := 1; j &amp;lt;= len(r2); j++ { cost := 0 if r1[i-1] !</description>
    </item>
    <item>
      <title>Crash Course in Go</title>
      <link>https://intothevoid.github.io/2022/12/crash-course-in-go/</link>
      <pubDate>Thu, 08 Dec 2022 15:35:51 +1030</pubDate>
      <guid>https://intothevoid.github.io/2022/12/crash-course-in-go/</guid>
      <description>Go, also known as Golang, is a modern, open-source programming language developed by Google. It is designed to be fast, efficient, and scalable, and it is widely used in a variety of applications, from web servers and cloud services to games and machine learning.&#xA;In this blog post, we&amp;rsquo;ll provide a crash course on Go programming, including its features, syntax, and available keywords. We&amp;rsquo;ll also include some examples to demonstrate how to use these concepts in your own code.</description>
    </item>
    <item>
      <title>Crash Course in Rust</title>
      <link>https://intothevoid.github.io/2022/12/crash-course-in-rust/</link>
      <pubDate>Wed, 07 Dec 2022 23:07:51 +1030</pubDate>
      <guid>https://intothevoid.github.io/2022/12/crash-course-in-rust/</guid>
      <description>This article is a crash course in Rust programming and its setup / usage. For a more detailed guide check out -&#xA;Rust Book https://doc.rust-lang.org/stable/book/ Rust By Example https://doc.rust-lang.org/stable/rust-by-example/ Introduction to Rust: This lesson would cover the basics of Rust, including its history, features, and the benefits of using it.&#xA;Setting up a development environment: This lesson would explain how to install Rust on your computer and set up a development environment, including a code editor and any necessary tools and libraries.</description>
    </item>
  </channel>
</rss>
