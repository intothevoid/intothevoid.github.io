<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Into The Void</title>
    <link>https://intothevoid.github.io/tags/golang/</link>
    <description>Recent content in golang on Into The Void</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Dec 2022 09:51:13 +1030</lastBuildDate><atom:link href="https://intothevoid.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The case of NoSQL Databases - MongoDB</title>
      <link>https://intothevoid.github.io/2022/12/the-case-of-nosql-databases-mongodb/</link>
      <pubDate>Fri, 30 Dec 2022 09:51:13 +1030</pubDate>
      
      <guid>https://intothevoid.github.io/2022/12/the-case-of-nosql-databases-mongodb/</guid>
      <description>NoSQL databases are a type of database that is designed to handle large amounts of data that is distributed across a large number of servers. NoSQL databases are particularly well-suited for handling unstructured data, such as text, images, and videos, and for handling data that is generated by web and mobile applications.
There are several different types of NoSQL databases, including:
Document databases: These databases store data in the form of documents, which are similar to JSON objects.</description>
    </item>
    
    <item>
      <title>The case of Levenshtein Distance</title>
      <link>https://intothevoid.github.io/2022/12/the-case-of-levenshtein-distance/</link>
      <pubDate>Mon, 26 Dec 2022 00:04:51 +1030</pubDate>
      
      <guid>https://intothevoid.github.io/2022/12/the-case-of-levenshtein-distance/</guid>
      <description>Levenshtein distance is a measure of the similarity between two strings, calculated as the minimum number of single-character edits (insertions, deletions, or substitutions) required to transform one string into the other. Here is an example of how you can calculate the Levenshtein distance between two strings in Go:
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math&amp;#34; ) func main() { s1 := &amp;#34;kitten&amp;#34; s2 := &amp;#34;sitting&amp;#34; distance := levenshteinDistance(s1, s2) fmt.Printf(&amp;#34;The Levenshtein distance between %s and %s is %d\n&amp;#34;, s1, s2, distance) } func levenshteinDistance(s1, s2 string) int { // Convert strings to rune slices for Unicode support r1 := []rune(s1) r2 := []rune(s2) // Initialize a two-dimensional matrix with all values set to zero matrix := make([][]int, len(r1)+1) for i := range matrix { matrix[i] = make([]int, len(r2)+1) } // Set the initial values of the first row and column of the matrix for i := 1; i &amp;lt;= len(r1); i++ { matrix[i][0] = i } for j := 1; j &amp;lt;= len(r2); j++ { matrix[0][j] = j } // Calculate the Levenshtein distance using the dynamic programming algorithm for i := 1; i &amp;lt;= len(r1); i++ { for j := 1; j &amp;lt;= len(r2); j++ { cost := 0 if r1[i-1] !</description>
    </item>
    
    <item>
      <title>The case of a Crash Course in Go</title>
      <link>https://intothevoid.github.io/2022/12/the-case-of-a-crash-course-in-go/</link>
      <pubDate>Thu, 08 Dec 2022 15:35:51 +1030</pubDate>
      
      <guid>https://intothevoid.github.io/2022/12/the-case-of-a-crash-course-in-go/</guid>
      <description>Go, also known as Golang, is a modern, open-source programming language developed by Google. It is designed to be fast, efficient, and scalable, and it is widely used in a variety of applications, from web servers and cloud services to games and machine learning.
In this blog post, we&amp;rsquo;ll provide a crash course on Go programming, including its features, syntax, and available keywords. We&amp;rsquo;ll also include some examples to demonstrate how to use these concepts in your own code.</description>
    </item>
    
  </channel>
</rss>
