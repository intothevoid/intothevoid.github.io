<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Into The Void</title>
    <link>https://intothevoid.github.io/</link>
    <description>Recent content on Into The Void</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Oct 2024 09:31:35 +0800</lastBuildDate>
    <atom:link href="https://intothevoid.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vim Setup From Scratch</title>
      <link>https://intothevoid.github.io/2024/10/vim-setup-from-scratch/</link>
      <pubDate>Mon, 14 Oct 2024 09:31:35 +0800</pubDate>
      <guid>https://intothevoid.github.io/2024/10/vim-setup-from-scratch/</guid>
      <description>&lt;p&gt;Vim setups can be quite involved. There is the batteries included approach (SpaceVim, LazyVim etc.) and there&amp;rsquo;s the hand rolled approach. Although the readymade approach is easier, manually setting up your Vim configuration can be a good learning experience.&lt;/p&gt;&#xA;&lt;p&gt;This guide is a way for me to have all the steps I normally follow when installing Vim. I&amp;rsquo;ll try and keep it simple and focus on languages I enjoy using as a developer - Golang and Python.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Variable Power Supply</title>
      <link>https://intothevoid.github.io/2024/07/variable-power-supply/</link>
      <pubDate>Sun, 21 Jul 2024 22:01:24 +0930</pubDate>
      <guid>https://intothevoid.github.io/2024/07/variable-power-supply/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In today&amp;rsquo;s world of electronics and DIY projects, having a reliable power supply is essential. However, purchasing a variable power supply can be quite expensive. In this blog post, we&amp;rsquo;ll guide you through creating your own variable power supply using an old laptop charger. This project not only saves you money but also gives new life to old electronic components that might otherwise end up in landfill.&lt;/p&gt;&#xA;&lt;h2 id=&#34;parts-required&#34;&gt;Parts Required&lt;/h2&gt;&#xA;&lt;p&gt;To embark on this project, you&amp;rsquo;ll need the following items:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Organise Videos By Resolution</title>
      <link>https://intothevoid.github.io/2024/05/organise-videos-by-resolution/</link>
      <pubDate>Sat, 18 May 2024 21:40:39 +0930</pubDate>
      <guid>https://intothevoid.github.io/2024/05/organise-videos-by-resolution/</guid>
      <description>&lt;p&gt;Recently I was clearing out some old movie rips that I had created from VideoCDs and DVDs many years ago. I wanted a quick and dirty way to organise these i.e. get rid of the videos of resolutions lower than 720p (1280x720)&lt;/p&gt;&#xA;&lt;p&gt;With LLMs all the rage at the moment, all it took is a few prompts and corrections and in 15 minutes I had this script ready to go -&lt;/p&gt;</description>
    </item>
    <item>
      <title>An introduction to the OpenAI API using Python</title>
      <link>https://intothevoid.github.io/2023/04/an-introduction-to-the-openai-api-using-python/</link>
      <pubDate>Wed, 19 Apr 2023 22:31:18 +0930</pubDate>
      <guid>https://intothevoid.github.io/2023/04/an-introduction-to-the-openai-api-using-python/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Ever wanted to play chess against an AI? With the OpenAI API, you can! This blog post will show you how to use Python to interface with the OpenAI API, send and receive requests, and even play a game of chess against an AI opponent. We&amp;rsquo;ll be using the FEN representation of the chess board to communicate game states with the API.&lt;/p&gt;&#xA;&lt;h2 id=&#34;setting-up&#34;&gt;Setting Up&lt;/h2&gt;&#xA;&lt;p&gt;Before we start, make sure you have the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type safety in Python with Pydantic</title>
      <link>https://intothevoid.github.io/2023/04/type-safety-in-python-with-pydantic/</link>
      <pubDate>Mon, 10 Apr 2023 16:56:00 +0930</pubDate>
      <guid>https://intothevoid.github.io/2023/04/type-safety-in-python-with-pydantic/</guid>
      <description>&lt;h2 id=&#34;introduction-to-pydantic&#34;&gt;Introduction to Pydantic&lt;/h2&gt;&#xA;&lt;p&gt;Pydantic is a Python library that provides data validation and settings management, using Python type annotations. It is designed to make it easy to define and validate data models, allowing you to catch errors and handle them gracefully, making your code more robust and easier to maintain.&lt;/p&gt;&#xA;&lt;p&gt;Pydantic is particularly useful for handling data that is passed between different parts of a system, such as between a front-end web form and a back-end API, or between different microservices. By defining a clear schema for the data, you can ensure that it is consistent and valid, regardless of where it comes from.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Guide to Docker</title>
      <link>https://intothevoid.github.io/2023/01/guide-to-docker/</link>
      <pubDate>Mon, 02 Jan 2023 21:33:44 +1030</pubDate>
      <guid>https://intothevoid.github.io/2023/01/guide-to-docker/</guid>
      <description>&lt;h2 id=&#34;i-introduction-to-docker&#34;&gt;I. Introduction to Docker&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What is Docker?&lt;/li&gt;&#xA;&lt;li&gt;How does Docker work?&lt;/li&gt;&#xA;&lt;li&gt;Why is Docker useful?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;what-is-docker&#34;&gt;What is Docker?&lt;/h3&gt;&#xA;&lt;p&gt;Docker is an open-source containerisation platform that allows you to package an application with all of its dependencies into a single container. This container can then be easily deployed and run on any platform that supports Docker, making it a great tool for building, shipping, and running applications.&lt;/p&gt;&#xA;&lt;h3 id=&#34;how-does-docker-work&#34;&gt;How does Docker work?&lt;/h3&gt;&#xA;&lt;p&gt;Docker works by using the host operating system&amp;rsquo;s kernel and automating the creation, deployment, and management of containers. A container is a lightweight, standalone, and executable package that includes everything an application needs to run, such as code, libraries, and runtime. Containers allow you to package and distribute an application as a single unit, making it easy to run and scale applications in different environments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NoSQL Databases - MongoDB</title>
      <link>https://intothevoid.github.io/2022/12/nosql-databases-mongodb/</link>
      <pubDate>Fri, 30 Dec 2022 09:51:13 +1030</pubDate>
      <guid>https://intothevoid.github.io/2022/12/nosql-databases-mongodb/</guid>
      <description>&lt;p&gt;NoSQL databases are a type of database that is designed to handle large amounts of data that is distributed across a large number of servers. NoSQL databases are particularly well-suited for handling unstructured data, such as text, images, and videos, and for handling data that is generated by web and mobile applications.&lt;/p&gt;&#xA;&lt;p&gt;There are several different types of NoSQL databases, including:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Document databases: These databases store data in the form of documents, which are similar to JSON objects. Document databases are designed to be flexible and scalable, and they are often used for storing large amounts of data that is not well-suited to the tabular structure of a traditional relational database. Examples of document databases include MongoDB, Apache Cassandra, Couchbase, and Amazon DocumentDB.&lt;/li&gt;&#xA;&lt;li&gt;Key-value stores: These databases store data as a collection of keys and values. Key-value stores are very fast and scalable, but they do not offer the same level of querying and indexing capabilities as other types of NoSQL databases. Examples of key-value stores include Redis and DynamoDB.&lt;/li&gt;&#xA;&lt;li&gt;Column-family databases: These databases store data as a collection of columns, rather than rows. Column-family databases are highly scalable and are often used for storing large amounts of data that needs to be accessed and processed quickly. Examples of column-family databases include Apache Cassandra and Google BigTable.&lt;/li&gt;&#xA;&lt;li&gt;Graph databases: These databases store data as a network of nodes and edges, which can be used to represent complex relationships between data items. Graph databases are often used for storing and querying data that has complex relationships, such as social networks or recommendation systems. Examples of graph databases include Neo4j and TigerGraph.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;One of the main benefits of NoSQL databases is their ability to scale horizontally, meaning that they can easily add more servers to the database cluster as the amount of data or number of users increases. This makes them well-suited for handling the high volume of data and traffic that is common in modern web and mobile applications. NoSQL databases are also generally easier to set up and maintain than traditional relational databases, which can require more complex schema design and administration.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Levenshtein Distance</title>
      <link>https://intothevoid.github.io/2022/12/levenshtein-distance/</link>
      <pubDate>Mon, 26 Dec 2022 00:04:51 +1030</pubDate>
      <guid>https://intothevoid.github.io/2022/12/levenshtein-distance/</guid>
      <description>&lt;p&gt;Levenshtein distance is a measure of the similarity between two strings, calculated as the minimum number of single-character edits (insertions, deletions, or substitutions) required to transform one string into the other. Here is an example of how you can calculate the Levenshtein distance between two strings in Go:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;math&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kitten&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;s2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sitting&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;distance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;levenshteinDistance&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Levenshtein distance between %s and %s is %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;distance&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;levenshteinDistance&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// Convert strings to rune slices for Unicode support&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;r1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []rune(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;r2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []rune(&lt;span style=&#34;color:#a6e22e&#34;&gt;s2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// Initialize a two-dimensional matrix with all values set to zero&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;r1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;r2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// Set the initial values of the first row and column of the matrix&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;r1&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;r2&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// Calculate the Levenshtein distance using the dynamic programming algorithm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;r1&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;r2&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] = min(&lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// Return the final value in the bottom-right corner of the matrix&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;r1&lt;/span&gt;)][len(&lt;span style=&#34;color:#a6e22e&#34;&gt;r2&lt;/span&gt;)]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; min(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// Return the minimum of three integers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Min&lt;/span&gt;(float64(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Min&lt;/span&gt;(float64(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;), float64(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;))))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code defines a function &lt;code&gt;levenshteinDistance&lt;/code&gt; that takes in two strings as input and returns an integer representing the Levenshtein distance between them. The function first converts the input strings to slices of runes (Unicode characters) to support Unicode characters. It then initializes a two-dimensional matrix with all values set to zero, and sets the initial values of the first row and column of the matrix to the lengths of the input strings.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spotify Playlist Backups using Python</title>
      <link>https://intothevoid.github.io/2022/12/spotify-playlist-backups-using-python/</link>
      <pubDate>Sun, 11 Dec 2022 11:43:47 +1030</pubDate>
      <guid>https://intothevoid.github.io/2022/12/spotify-playlist-backups-using-python/</guid>
      <description>&lt;p&gt;To create a web application that backs up your Spotify playlists as a JSON file, you will need to do the following:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;First, you will need to install the &lt;code&gt;spotipy&lt;/code&gt; library, which provides a Python interface for the Spotify Web API. You can do this by running the following command:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install spotipy &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;Next, you will need to create a Spotify app and obtain a client ID and client secret for the app. You can do this by logging in to the &lt;a href=&#34;https://developer.spotify.com/dashboard&#34;&gt;Spotify Developer Dashboard&lt;/a&gt; and following the instructions on the website.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;creating-the-python-backend&#34;&gt;Creating the Python Backend&lt;/h2&gt;&#xA;&lt;p&gt;Once you have obtained your client ID and client secret, you can use the &lt;code&gt;spotipy.Spotify&lt;/code&gt; class to authenticate yourself and access the Spotify Web API. An example of how you can do this is shown below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Crash Course in Go</title>
      <link>https://intothevoid.github.io/2022/12/crash-course-in-go/</link>
      <pubDate>Thu, 08 Dec 2022 15:35:51 +1030</pubDate>
      <guid>https://intothevoid.github.io/2022/12/crash-course-in-go/</guid>
      <description>&lt;p&gt;Go, also known as Golang, is a modern, open-source programming language developed by Google. It is designed to be fast, efficient, and scalable, and it is widely used in a variety of applications, from web servers and cloud services to games and machine learning.&lt;/p&gt;&#xA;&lt;p&gt;In this blog post, we&amp;rsquo;ll provide a crash course on Go programming, including its features, syntax, and available keywords. We&amp;rsquo;ll also include some examples to demonstrate how to use these concepts in your own code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Crash Course in Rust</title>
      <link>https://intothevoid.github.io/2022/12/crash-course-in-rust/</link>
      <pubDate>Wed, 07 Dec 2022 23:07:51 +1030</pubDate>
      <guid>https://intothevoid.github.io/2022/12/crash-course-in-rust/</guid>
      <description>&lt;p&gt;This article is a crash course in Rust programming and  its setup / usage. For a more detailed guide check out -&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Rust Book &lt;a href=&#34;https://doc.rust-lang.org/stable/book/&#34;&gt;https://doc.rust-lang.org/stable/book/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Rust By Example &lt;a href=&#34;https://doc.rust-lang.org/stable/rust-by-example/&#34;&gt;https://doc.rust-lang.org/stable/rust-by-example/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Introduction to Rust&lt;/strong&gt;: This lesson would cover the basics of Rust, including its history, features, and the benefits of using it.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Setting up a development environment&lt;/strong&gt;: This lesson would explain how to install Rust on your computer and set up a development environment, including a code editor and any necessary tools and libraries.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contact</title>
      <link>https://intothevoid.github.io/contact/</link>
      <pubDate>Sat, 06 Aug 2022 11:29:40 +0930</pubDate>
      <guid>https://intothevoid.github.io/contact/</guid>
      <description>&lt;p&gt;You can get in touch with me by leaving me a message here. Feel free to leave feedback good or bad, or simply to say hello. Thank you for your message!&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;&lt;form action=&#34;https://formspree.io/f/mjvjvvqj&#34; method=&#34;post&#34;&gt;&#xA;  &lt;textarea rows=&#34;10&#34; cols=&#34;60&#34; id=&#34;message&#34; name=&#34;text&#34; placeholder=&#34;Type your message here and click &#39;Submit&#39;&#34;&gt;&lt;/textarea&gt;&#xA;  &lt;br&gt;&#xA;  &lt;button type=&#34;submit&#34;&gt;Submit&lt;/button&gt;&#xA;&lt;/form&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Transferring Files from iOS to Linux wirelessly</title>
      <link>https://intothevoid.github.io/2022/08/transferring-files-from-ios-to-linux-wirelessly/</link>
      <pubDate>Sat, 06 Aug 2022 09:29:40 +0930</pubDate>
      <guid>https://intothevoid.github.io/2022/08/transferring-files-from-ios-to-linux-wirelessly/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;I was an Android user for a long period of time, right from the Jellybean and&#xA;Gingerbread days. After almost a decade being with Android I finally moved to&#xA;iOS, because I was sick of the fragmentation and I wish Android took privacy&#xA;as seriously as iOS does. One of the most common things I need to do is transfer&#xA;files across from my iOS device to my Linux laptop. One way of doing this is to&#xA;connect my laptop and iPhone with a lightning cable, however it is super&#xA;inconvenient and you don&amp;rsquo;t always have a cable lying around. You can email&#xA;the file to yourself but thats a really roundabout way to do it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About Me</title>
      <link>https://intothevoid.github.io/about/</link>
      <pubDate>Tue, 02 Aug 2022 09:29:40 +0930</pubDate>
      <guid>https://intothevoid.github.io/about/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://intothevoid.github.io/images/about.jpg&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;h4&gt;Tasmania, 2021 🇦🇺&lt;/h4&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Hi! My name is Karan and I&amp;rsquo;ve been writing code professionally for about 16 years now.&lt;/p&gt;&#xA;&lt;p&gt;My programming journey has taken me from Medical Electronics to Simulation to Defence.&lt;/p&gt;&#xA;&lt;p&gt;I started dabbling with computers when I was in 7th grade and my parents bought my sister a Pentium 166MMX.&#xA;This was a single core processor that ran at a 166Mhz! It had 16mb (yes megabytes) of memory and a 2.1gb hard drive.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setup Vim (Astro Vim) on a Macbook</title>
      <link>https://intothevoid.github.io/2022/07/setup-vim-astro-vim-on-a-macbook/</link>
      <pubDate>Sun, 31 Jul 2022 11:53:48 +0930</pubDate>
      <guid>https://intothevoid.github.io/2022/07/setup-vim-astro-vim-on-a-macbook/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;Use the following steps to have a decent vim installation relatively quickly on a Macbook with a M1 / M2 chipset&lt;/p&gt;&#xA;&lt;h2 id=&#34;brew-installation&#34;&gt;Brew installation&lt;/h2&gt;&#xA;&lt;p&gt;Brew is a package manager for MacOS which makes it very easy to install packages. I highly recommend this package manager on MacOS. Its worth the effort to get it installed you will thank yourself later on.&lt;/p&gt;&#xA;&lt;p&gt;From &lt;a href=&#34;https://www.brew.sh&#34;&gt;www.brew.sh&lt;/a&gt; -&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sample command using brew -&lt;/p&gt;</description>
    </item>
    <item>
      <title>Create a blog using Hugo and Github Pages</title>
      <link>https://intothevoid.github.io/2021/04/create-a-blog-using-hugo-and-github-pages/</link>
      <pubDate>Mon, 05 Apr 2021 14:13:49 +0930</pubDate>
      <guid>https://intothevoid.github.io/2021/04/create-a-blog-using-hugo-and-github-pages/</guid>
      <description>&lt;p&gt;Update: Added section on adding Github Action for Hugo build&lt;/p&gt;&#xA;&lt;p&gt;This is a guide on how you can create a blog or website from scratch using Hugo and Github. This is also my first post on this blog, which has been created using the steps mentioned in this article using Hugo and Github Pages.&lt;/p&gt;&#xA;&lt;p&gt;It is quite easy to create a blog using Wordpress or some other CMS but the simplicity of Hugo is what drove me to it. Hugo is a static html generator. This means, you write posts using Markdown and templates using any text editor. Hugo then processes these files and generates a bunch of html and css.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
